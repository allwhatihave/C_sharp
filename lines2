using System.Windows.Forms;
using static System.Runtime.InteropServices.JavaScript.JSType;

namespace WinFormsApp6
{
    public partial class Form1 : Form
    {
        private List<Line> lines;
        private List<Line> lines2;
        private List<Line> lines3;
        private Line currentLine;
        private Random random = new Random();
        public int speed;
        public Form1()
        {
            InitializeComponent();
            lines = new List<Line>();
            lines2 = new List<Line>();
            lines3 = new List<Line>();
            timer1.Interval = 1000;
        }
        Graphics g;
        private void pictureBox1_MouseDown(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Left)
            {
                currentLine = new Line
                {
                    Color = Color.FromArgb(random.Next(256), random.Next(256), random.Next(256)),
                    points = new List<Point> { e.Location },
                };
                lines.Add(currentLine);
            }
        }

        private void pictureBox1_MouseUp(object sender, MouseEventArgs e)
        {
            currentLine = null;
        }

        private void pictureBox1_MouseMove(object sender, MouseEventArgs e)
        {
            if (currentLine != null && e.Button == MouseButtons.Left)
            {
                currentLine.points.Add(e.Location);
                pictureBox1.Invalidate();
            }
        }

        private void pictureBox1_Paint(object sender, PaintEventArgs e)
        {
            g = e.Graphics;
            foreach (var line in lines)
            {
                if (line.points.Count > 1)
                {
                    g.DrawLines(new Pen(line.Color, 8), line.points.ToArray());
                }
            }
        }
        public class Line
        {
            public Color Color { get; set; }
            public List<Point> points { get; set; }
        }

        private void button1_Click(object sender, EventArgs e)
        {
            lines2.Clear();
            foreach (var line in lines)
            {
                lines2.Add(new Line
                {
                    Color = line.Color,
                    points = new List<Point>()
                });
            }

            // Очищаем экран
            lines.Clear();
            pictureBox1.Invalidate();

            // Запускаем таймер для воспроизведения
            timer1.Interval = speed > 0 ? speed : 1000; // Устанавливаем интервал
            timer1.Start();
        }

        private void timer1_Tick(object sender, EventArgs e)
        {
            bool hasMorePoints = false;

            // Постепенно добавляем точки в playbackLines
            for (int i = 0; i < lines2.Count; i++)
            {
                if (lines2[i].points.Count < lines[i].points.Count)
                {
                    // Добавляем следующую точку, только если индекс не выходит за пределы
                    int nextPointIndex = lines2[i].points.Count; // Следующий индекс точки
                    if (nextPointIndex < lines[i].points.Count)
                    {
                        lines2[i].points.Add(lines[i].points[nextPointIndex]);
                        hasMorePoints = true;
                    }
                }
            }

            // Перерисовываем PictureBox после добавления точек
            pictureBox1.Invalidate();

            // Останавливаем таймер, если больше нечего добавлять
            if (!hasMorePoints)
            {
                timer1.Stop();
            }

        }

        private void button2_Click(object sender, EventArgs e)
        {
            if (int.TryParse(textBox1.Text, out speed))
            {
                // Успешное преобразование
                // Можно использовать переменную number
                MessageBox.Show($"Текущая скорость {speed}");

            }
            else
            {
                // Некорректный ввод
                MessageBox.Show("Пожалуйста, введите корректное целое число.");
            }
        }
    }
}
